{
    "id": "a591cf801c29ce47",
    "slug": "map-of-seattle-with-zip-codes",
    "trashed": false,
    "description": "",
    "likes": 1,
    "publish_level": "live_unlisted",
    "forks": 0,
    "fork_of": null,
    "has_importers": false,
    "update_time": "2024-07-12T01:44:13.413Z",
    "first_public_version": 125,
    "paused_version": null,
    "publish_time": "2024-07-11T06:49:19.619Z",
    "publish_version": 226,
    "latest_version": 226,
    "thumbnail": null,
    "default_thumbnail": null,
    "roles": [],
    "sharing": null,
    "edits": [
        {
            "node_id": 4,
            "value": "curr_sea_dist_raw = FileAttachment(\"zip-codes.geojson\").json()"
        }
    ],
    "owner": {
        "id": "0135c59dec57049a",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/80498d6e9326c7925958ff4b5fe713851c8520978c693f31a9b38002962df94c",
        "login": "andy-thai2",
        "name": "Andy Thai",
        "bio": "",
        "home_url": "",
        "type": "team",
        "tier": "starter_2024"
    },
    "creator": {
        "id": "40de5409b80a4718",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/ec55880290f41d7b782d35494b5b7352f99ec43ee894c5d8921fa46f7493e410",
        "login": "andy-thai2",
        "name": "Andy Thai",
        "bio": "",
        "home_url": "",
        "tier": "public"
    },
    "authors": [
        {
            "id": "40de5409b80a4718",
            "avatar_url": "https://avatars.observableusercontent.com/avatar/ec55880290f41d7b782d35494b5b7352f99ec43ee894c5d8921fa46f7493e410",
            "name": "Andy Thai",
            "login": "andy-thai2",
            "bio": "",
            "home_url": "",
            "tier": "public",
            "approved": true,
            "description": ""
        }
    ],
    "collections": [],
    "files": [
        {
            "id": "05c5770b590201a2bdd7ebe90e7c5879c7e0b158e318f4594cca6992f9738a0b8713f75066a09cd28616e80df428154d6faef2dcf7b50ecfff81f7d570124fd6",
            "url": "https://static.observableusercontent.com/files/05c5770b590201a2bdd7ebe90e7c5879c7e0b158e318f4594cca6992f9738a0b8713f75066a09cd28616e80df428154d6faef2dcf7b50ecfff81f7d570124fd6",
            "download_url": "https://static.observableusercontent.com/files/05c5770b590201a2bdd7ebe90e7c5879c7e0b158e318f4594cca6992f9738a0b8713f75066a09cd28616e80df428154d6faef2dcf7b50ecfff81f7d570124fd6?response-content-disposition=attachment%3Bfilename*%3DUTF-8%27%27zip-codes.geojson",
            "name": "zip-codes.geojson",
            "create_time": "2024-07-10T21:26:20.259Z",
            "mime_type": "application/geo+json",
            "status": "public",
            "size": 49044,
            "content_encoding": null,
            "private_bucket_id": null
        },
        {
            "id": "cf5c590bf5a49c20d45c4646d70a34732d4c650ba64b50f7dd23bca8916ebd679b408f3ec4a094a08ba2e33202ac40b4889c4d798578d07e842f6370d6faac43",
            "url": "https://static.observableusercontent.com/files/cf5c590bf5a49c20d45c4646d70a34732d4c650ba64b50f7dd23bca8916ebd679b408f3ec4a094a08ba2e33202ac40b4889c4d798578d07e842f6370d6faac43",
            "download_url": "https://static.observableusercontent.com/files/cf5c590bf5a49c20d45c4646d70a34732d4c650ba64b50f7dd23bca8916ebd679b408f3ec4a094a08ba2e33202ac40b4889c4d798578d07e842f6370d6faac43?response-content-disposition=attachment%3Bfilename*%3DUTF-8%27%27Active_Business_License_Tax_Certificate_20240711%25401.csv",
            "name": "Active_Business_License_Tax_Certificate_20240711@1.csv",
            "create_time": "2024-07-11T22:22:12.288Z",
            "mime_type": "text/csv",
            "status": "public",
            "size": 20870526,
            "content_encoding": "gzip",
            "private_bucket_id": null
        }
    ],
    "comments": [],
    "commenting_lock": null,
    "suggestion_from": null,
    "suggestions_to": [],
    "version": 226,
    "title": "Map of Seattle With Zip codes",
    "license": null,
    "copyright": "",
    "nodes": [
        {
            "id": 0,
            "value": "# Map of Seattle With Zip codes\n\n",
            "pinned": false,
            "mode": "md",
            "data": null,
            "name": ""
        },
        {
            "id": 112,
            "value": "//businesses = FileAttachment(\"Active_Business_License_Tax_Certificate_20240710.csv\").csv()",
            "pinned": true,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 4,
            "value": "curr_sea_dist_raw = FileAttachment(\"zip-codes.geojson\").json()",
            "pinned": true,
            "mode": "js",
            "data": {},
            "name": null
        },
        {
            "id": 171,
            "value": "businesses = FileAttachment(\"Active_Business_License_Tax_Certificate_20240711@1.csv\").csv()",
            "pinned": true,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 133,
            "value": "data = [{\"year\":2019}, {\"year\":2020}];",
            "pinned": true,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 143,
            "value": "years = Array.from({ length: 6}, (_, i) => (2017 + i).toString());",
            "pinned": true,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 131,
            "value": "viewof yearDropdown = Inputs.select(years, {label: \"Pick a year\"})",
            "pinned": true,
            "mode": "js",
            "data": null,
            "name": null
        },
        {
            "id": 7,
            "value": "voronoiMap2 = {\n  let ordinalRand = d3.schemeSet3;\n  var defFillv,\n      defRb = \"1.5px\",\n      defFillb = \"black\",\n      defFillgL = \"rgb(209, 209, 209)\",\n      defFillgR = \"white\",\n      defOpv = \"0.4\",\n      defFillbR = \"none\";\n\n  var tooltip = d3.select(\"body\")\n    .append(\"div\")\n    .style(\"position\", \"absolute\")\n    .style(\"z-index\", \"10\")\n    .style(\"visibility\", \"hidden\")\n    .attr(\"class\", \"tooltip\")\n    .style(\"font-family\", \"Lato\");\n\n  var div = d3.create('div');\n\n  var width = 800; // Adjust as needed\n  var height = 600; // Adjust as needed\n  const svg = div.append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  // Calculate the bounding box of the features\n  var b = d3.geoBounds(curr_sea_dist_raw);\n  var center = [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2];\n  var scale = 0.95 / Math.max((b[1][0] - b[0][0]) / width, (b[1][1] - b[0][1]) / height);\n\n  var projection = d3.geoMercator()\n    .center(center)\n    .scale(scale * 42) // Adjust the scaling factor as needed\n    .translate([width / 2, height / 2]);\n\n  var path = d3.geoPath().projection(projection);\n\n  // Define a color scale\n  var colorScale = d3.scaleSequential(d3.interpolateBlues)\n    .domain([0, 100]); // Adjust the domain as needed based on your data\n\n  // Function to create the legend\n  function createLegend() {\n    const legendWidth = 200;\n    const legendHeight = 20;\n\n    const legend = svg.append(\"g\")\n      .attr(\"class\", \"legend\")\n      .attr(\"transform\", `translate(${width - legendWidth - 20}, ${height - legendHeight - 20})`);\n\n    const legendScale = d3.scaleLinear()\n      .domain([0, 100]) // Adjust based on your data\n      .range([0, legendWidth]);\n\n    const legendAxis = d3.axisBottom(legendScale)\n      .ticks(5)\n      .tickFormat(d => `${d}`);\n\n    legend.append(\"g\")\n      .attr(\"transform\", `translate(0, ${legendHeight})`)\n      .call(legendAxis);\n\n    legend.append(\"rect\")\n      .attr(\"width\", legendWidth)\n      .attr(\"height\", legendHeight)\n      .style(\"fill\", \"url(#legendGradient)\");\n\n    const gradient = legend.append(\"defs\")\n      .append(\"linearGradient\")\n      .attr(\"id\", \"legendGradient\")\n      .attr(\"x1\", \"0%\").attr(\"y1\", \"0%\")\n      .attr(\"x2\", \"100%\").attr(\"y2\", \"0%\");\n\n    gradient.selectAll(\"stop\")\n      .data(d3.ticks(0, 1, 5))\n      .enter().append(\"stop\")\n      .attr(\"offset\", d => `${d * 100}%`)\n      .attr(\"stop-color\", d => colorScale(d * 100));\n\n    legend.append(\"text\")\n      .attr(\"class\", \"legend-label\")\n      .attr(\"x\", legendWidth / 2)\n      .attr(\"y\", -5)\n      .style(\"text-anchor\", \"middle\")\n      .text(\"Number of Businesses\");\n\n    return legend;\n  }\n\n  // Assuming the JSON data is loaded and stored in a variable called `businessData`\n  function updateMap(year) {\n    // Aggregate business data by ZIP code for the selected year\n    var businessCountByZip = d3.rollup(businesses.filter(d => d[\"License Start Date\"].slice(0,4) === year), v => v.length, d => d.Zip);\n\n    // SVG Canvas\n    svg.selectAll('.curr_sea_dist')\n      .data(curr_sea_dist_raw.features)\n      .join(\"path\")\n      .attr(\"class\", \"curr_sea_dist\")\n      .attr(\"d\", path)\n      .attr(\"id\", function(d, i) { return `l1${d.properties.OBJECTID}`; })\n      .attr(\"fill\", d => colorScale(businessCountByZip.get(d.properties.ZCTA5CE10) || 0))\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", \"1px\")\n      .on('mouseover', function(e, d) {\n        var zipCode = d.properties.ZCTA5CE10;\n        var businessCount = businessCountByZip.get(zipCode) || 0;\n        tooltip.style(\"visibility\", \"visible\").html(`ZIP Code: ${zipCode}<br>Businesses: ${businessCount}`);\n        d3.select(this).attr(\"stroke-width\", \"2.5px\");\n      })\n      .on('mousemove', function(e) {\n        tooltip.style(\"top\", (e.pageY - 10) + \"px\").style(\"left\", (e.pageX + 20) + \"px\");\n      })\n      .on('mouseout', function() {\n        tooltip.style(\"visibility\", \"hidden\");\n        d3.select(this).attr(\"stroke-width\", \"1px\");\n      });\n\n    // Update legend\n    svg.selectAll(\".legend\").remove(); // Remove existing legend\n    createLegend(); // Create updated legend\n  }\n\n  // Initial map update\n  updateMap(yearDropdown);\n\n  // Update map when the dropdown value changes\n  viewof yearDropdown.addEventListener(\"input\", () => {\n    updateMap(yearDropdown);\n  });\n\n  return div.node();\n}\n\n",
            "pinned": true,
            "mode": "js",
            "data": null,
            "name": null
        }
    ],
    "resolutions": [],
    "schedule": null,
    "last_view_time": null
}